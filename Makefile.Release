#############################################################################
# Makefile for building: AutomaticCryptanalisis
# Generated by qmake (2.01a) (Qt 4.5.0) on: ?? 5. ??? 12:17:55 2016
# Project:  AutomaticCryptanalisis.pro
# Template: app
#############################################################################

####### Compiler, tools and options

CC            = gcc
CXX           = g++
DEFINES       = -DUNICODE -DQT_LARGEFILE_SUPPORT -DQT_DLL -DQT_NO_DEBUG -DQT_THREAD_SUPPORT
CFLAGS        = -O2 -Wall $(DEFINES)
CXXFLAGS      = -O2 -frtti -fexceptions -mthreads -Wall $(DEFINES)
INCPATH       = -I"c:\Qt\2009.01\qt\include" -I"WinNTL-5_5_2\include" -I"WinNTL-5_5_2\src" -I"c:\Qt\2009.01\qt\include\ActiveQt" -I"release" -I"." -I"c:\Qt\2009.01\qt\mkspecs\win32-g++"
LINK        =        g++
LFLAGS        =        -enable-stdcall-fixup -Wl,-enable-auto-import -Wl,-enable-runtime-pseudo-reloc -Wl,-s -Wl,-subsystem,console -mthreads -Wl
LIBS        =        -L"c:\Qt\2009.01\qt\lib" WinNTL-5_5_2\NTL\release\libNTL.a
QMAKE         = c:\qt\2009.01\qt\bin\qmake.exe
IDC           = c:\Qt\2009.01\qt\bin\idc.exe
IDL           = midl
ZIP           = zip -r -9
DEF_FILE      = 
RES_FILE      = 
COPY          = copy /y
COPY_FILE     = $(COPY)
COPY_DIR      = xcopy /s /q /y /i
DEL_FILE      = del
DEL_DIR       = rmdir
MOVE          = move
CHK_DIR_EXISTS= if not exist
MKDIR         = mkdir
INSTALL_FILE    = $(COPY_FILE)
INSTALL_PROGRAM = $(COPY_FILE)
INSTALL_DIR     = $(COPY_DIR)

####### Output directory

OBJECTS_DIR   = release

####### Files

SOURCES       = main.cpp \
		PolynomialIdeal.cpp \
		Polynomial.cpp \
		MonomialOrder.cpp \
		Monomial.cpp \
		Utility.cpp \
		SymbolicOctonion.cpp \
		PolynomialFraction.cpp \
		SymbolicMatrix.cpp \
		Variable.cpp \
		Cryptosystems\YagisavaCryptosystem.cpp \
		Cryptosystems\KipnisHibshooshCryptosystem.cpp \
		Cryptosystems\GavinCryptosystem.cpp 
OBJECTS       = release/main.o \
		release/PolynomialIdeal.o \
		release/Polynomial.o \
		release/MonomialOrder.o \
		release/Monomial.o \
		release/Utility.o \
		release/SymbolicOctonion.o \
		release/PolynomialFraction.o \
		release/SymbolicMatrix.o \
		release/Variable.o \
		release/YagisavaCryptosystem.o \
		release/KipnisHibshooshCryptosystem.o \
		release/GavinCryptosystem.o
DIST          = 
QMAKE_TARGET  = AutomaticCryptanalisis
DESTDIR        = release\ #avoid trailing-slash linebreak
TARGET         = AutomaticCryptanalisis.exe
DESTDIR_TARGET = release\AutomaticCryptanalisis.exe

####### Implicit rules

.SUFFIXES: .cpp .cc .cxx .c

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o $@ $<

####### Build rules

first: all
all: Makefile.Release  $(DESTDIR_TARGET)

$(DESTDIR_TARGET):  $(OBJECTS) 
	$(LINK) $(LFLAGS) -o $(DESTDIR_TARGET) object_script.AutomaticCryptanalisis.Release  $(LIBS)


qmake:  FORCE
	@$(QMAKE) -spec c:\Qt\2009.01\qt\mkspecs\win32-g++ -win32 -o Makefile.Release AutomaticCryptanalisis.pro

dist:
	$(ZIP) AutomaticCryptanalisis.zip $(SOURCES) $(DIST) AutomaticCryptanalisis.pro c:\Qt\2009.01\qt\mkspecs\qconfig.pri c:\Qt\2009.01\qt\mkspecs\features\qt_functions.prf c:\Qt\2009.01\qt\mkspecs\features\qt_config.prf c:\Qt\2009.01\qt\mkspecs\features\exclusive_builds.prf c:\Qt\2009.01\qt\mkspecs\features\default_pre.prf c:\Qt\2009.01\qt\mkspecs\features\win32\default_pre.prf c:\Qt\2009.01\qt\mkspecs\features\release.prf c:\Qt\2009.01\qt\mkspecs\features\debug_and_release.prf c:\Qt\2009.01\qt\mkspecs\features\default_post.prf c:\Qt\2009.01\qt\mkspecs\features\win32\default_post.prf c:\Qt\2009.01\qt\mkspecs\features\build_pass.prf c:\Qt\2009.01\qt\mkspecs\features\win32\console.prf c:\Qt\2009.01\qt\mkspecs\features\win32\rtti.prf c:\Qt\2009.01\qt\mkspecs\features\win32\exceptions.prf c:\Qt\2009.01\qt\mkspecs\features\win32\stl.prf c:\Qt\2009.01\qt\mkspecs\features\shared.prf c:\Qt\2009.01\qt\mkspecs\features\warn_on.prf c:\Qt\2009.01\qt\mkspecs\features\qt.prf c:\Qt\2009.01\qt\mkspecs\features\win32\thread.prf c:\Qt\2009.01\qt\mkspecs\features\moc.prf c:\Qt\2009.01\qt\mkspecs\features\resources.prf c:\Qt\2009.01\qt\mkspecs\features\uic.prf c:\Qt\2009.01\qt\mkspecs\features\yacc.prf c:\Qt\2009.01\qt\mkspecs\features\lex.prf  HEADERS RESOURCES IMAGES SOURCES OBJECTIVE_SOURCES FORMS YACCSOURCES YACCSOURCES LEXSOURCES 

clean: compiler_clean 
	-$(DEL_FILE) release\main.o release\PolynomialIdeal.o release\Polynomial.o release\MonomialOrder.o release\Monomial.o release\Utility.o release\SymbolicOctonion.o release\PolynomialFraction.o release\SymbolicMatrix.o release\Variable.o release\YagisavaCryptosystem.o release\KipnisHibshooshCryptosystem.o release\GavinCryptosystem.o

distclean: clean
	-$(DEL_FILE) $(DESTDIR_TARGET)
	-$(DEL_FILE) Makefile.Release

mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_moc_header_make_all:
compiler_moc_header_clean:
compiler_rcc_make_all:
compiler_rcc_clean:
compiler_image_collection_make_all: qmake_image_collection.cpp
compiler_image_collection_clean:
	-$(DEL_FILE) qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all:
compiler_uic_clean:
compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean: 



####### Compile

release/main.o: main.cpp PolynomialIdeal.h \
		Utility.h \
		Polynomial.h \
		Monomial.h \
		MonomialOrder.h \
		Variable.h \
		SymbolicOctonion.h \
		PolynomialFraction.h \
		SymbolicMatrix.h \
		Cryptosystems/YagisavaCryptosystem.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o release\main.o main.cpp

release/PolynomialIdeal.o: PolynomialIdeal.cpp PolynomialIdeal.h \
		Utility.h \
		Polynomial.h \
		Monomial.h \
		MonomialOrder.h \
		Variable.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o release\PolynomialIdeal.o PolynomialIdeal.cpp

release/Polynomial.o: Polynomial.cpp Polynomial.h \
		Utility.h \
		Monomial.h \
		MonomialOrder.h \
		Variable.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o release\Polynomial.o Polynomial.cpp

release/MonomialOrder.o: MonomialOrder.cpp MonomialOrder.h \
		Utility.h \
		Variable.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o release\MonomialOrder.o MonomialOrder.cpp

release/Monomial.o: Monomial.cpp Monomial.h \
		MonomialOrder.h \
		Utility.h \
		Variable.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o release\Monomial.o Monomial.cpp

release/Utility.o: Utility.cpp Utility.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o release\Utility.o Utility.cpp

release/SymbolicOctonion.o: SymbolicOctonion.cpp SymbolicOctonion.h \
		PolynomialFraction.h \
		Polynomial.h \
		Utility.h \
		Monomial.h \
		MonomialOrder.h \
		Variable.h \
		SymbolicMatrix.h \
		PolynomialIdeal.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o release\SymbolicOctonion.o SymbolicOctonion.cpp

release/PolynomialFraction.o: PolynomialFraction.cpp PolynomialFraction.h \
		Polynomial.h \
		Utility.h \
		Monomial.h \
		MonomialOrder.h \
		Variable.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o release\PolynomialFraction.o PolynomialFraction.cpp

release/SymbolicMatrix.o: SymbolicMatrix.cpp SymbolicMatrix.h \
		PolynomialFraction.h \
		Polynomial.h \
		Utility.h \
		Monomial.h \
		MonomialOrder.h \
		Variable.h \
		PolynomialIdeal.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o release\SymbolicMatrix.o SymbolicMatrix.cpp

release/Variable.o: Variable.cpp Variable.h \
		Utility.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o release\Variable.o Variable.cpp

release/YagisavaCryptosystem.o: Cryptosystems/YagisavaCryptosystem.cpp Cryptosystems/YagisavaCryptosystem.h \
		SymbolicOctonion.h \
		PolynomialFraction.h \
		Polynomial.h \
		Utility.h \
		Monomial.h \
		MonomialOrder.h \
		Variable.h \
		SymbolicMatrix.h \
		PolynomialIdeal.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o release\YagisavaCryptosystem.o Cryptosystems\YagisavaCryptosystem.cpp

release/KipnisHibshooshCryptosystem.o: Cryptosystems/KipnisHibshooshCryptosystem.cpp Cryptosystems/KipnisHibshooshCryptosystem.h \
		SymbolicMatrix.h \
		PolynomialFraction.h \
		Polynomial.h \
		Utility.h \
		Monomial.h \
		MonomialOrder.h \
		Variable.h \
		PolynomialIdeal.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o release\KipnisHibshooshCryptosystem.o Cryptosystems\KipnisHibshooshCryptosystem.cpp

release/GavinCryptosystem.o: Cryptosystems/GavinCryptosystem.cpp Cryptosystems/GavinCryptosystem.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o release\GavinCryptosystem.o Cryptosystems\GavinCryptosystem.cpp

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:

